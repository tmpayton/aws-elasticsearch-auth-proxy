#!/usr/bin/env bash

set -euo pipefail

dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
python=${dir}/venv/bin/python
usage() {
  local me=$(basename $0)
  cat <<-EOF

  USAGE: ${me} COMMAND

  Run development workflows.

  Examples:

    # Run the tests once
    ${me}

    # same as above
    ${me} tests

    # install dev dependencies in a local virtualenv
    ${me} set-up-environment

    # add new required packages from requirements.in to requirements.txt
    ${me} update-requirements

    # upgrade versions for requirements
    ${me} upgrade-requirements

    # upgrade version for specific requirement
    ${me} upgrade-requirements <requirement>

    # run flask locally
    ${me} serve


EOF
}

pushd () {
    # make pushd silent
    command pushd "$@" > /dev/null
}

popd () {
    # make popd silent
    command popd "$@" > /dev/null
}

update_requirements() {
  export CUSTOM_COMPILE_COMMAND="./dev update-requirements"
  $python -m piptools compile \
    --quiet \
    --output-file=requirements.txt \
    pip-tools/requirements.in
   $python -m piptools compile \
    --quiet \
    --output-file=dev-requirements.txt \
    pip-tools/dev-requirements.in
}

set_up_environment () {
  python -m venv venv
  # do this first to make sure we have piptools
  ${python} -m pip install -r dev-requirements.txt
  # do this again for syncs that might involve deletions
  ${python} -m piptools sync requirements.txt dev-requirements.txt
}

upgrade_requirements() {
  if [[ $# -ge 1 ]]; then
    if [[ $# -ge 2 ]]; then
      echo "can't update more than one package at a time"
    fi
    ${python} -m piptools compile --upgrade-package "$1" --output-file requirements.txt pip-tools/requirements.in
    ${python} -m piptools compile --upgrade-package "$1" --output-file dev-requirements.txt pip-tools/dev-requirements.in

  else
    ${python} -m piptools compile --upgrade --output-file requirements.txt pip-tools/requirements.in
    ${python} -m piptools compile --upgrade --output-file dev-requirements.txt pip-tools/dev-requirements.in
  fi
}

watch_tests() {
  export FLASK_ENV=unit
  ${python} -m piptools sync requirements.txt dev-requirements.txt
  ${python} -m pytest_watch --spool=1000 -n -c -w -- -Werror -vv tests "$@"

}

cf_push() {
      cf push -f cf/proxy-manifest.yml --vars-file cf/secrets.yml
}
main() {
  pushd ${dir}
  trap popd exit
  local command=$1
  shift
  case $command in 
    -h)
      usage
      ;;
    update-requirements|update-requirement)
      update_requirements "$@"
      ;;
    upgrade-requirements|upgrade_requirement)
      upgrade_requirements "$@"
      ;;
    set-up-environment|setup-environment)
      set_up_environment
      ;;
    test|tests)
      export FLASK_ENV=unit
      ${python} -m piptools sync requirements.txt dev-requirements.txt
      ${python} -m pytest tests
      ;;
    serve)
      set -o allexport; source ${dir}/.env; set +o allexport
      export FLASK_APP="aws_es_auth_proxy.app:create_app()"
      
      ${python} -m flask run -p ${PORT}
      ;;
    cf)
      cf_push
      ;;
    watch-test|watch-tests)
      watch_tests
      ;;
    *)
      usage
      exit 1
      ;;
  esac
}

main "$@"
